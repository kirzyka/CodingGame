/*var inputs = readline().split(' ');
var nbFloors = parseInt(inputs[0]); // number of floors
var width = parseInt(inputs[1]); // width of the area
var nbRounds = parseInt(inputs[2]); // maximum number of rounds
var exitFloor = parseInt(inputs[3]); // floor on which the exit is found
var exitPos = parseInt(inputs[4]); // position of the exit on its floor
var nbTotalClones = parseInt(inputs[5]); // number of generated clones
var nbAdditionalElevators = parseInt(inputs[6]); // ignore (always zero)
var nbElevators = parseInt(inputs[7]); // number of elevators
*/

[nbFloors,width,nbRounds,exitFloor,exitPos,nbTotalClones,nbAdditionalElevators,nbElevators] = readline().split(' ');
elevators = {};
for (var i = 0; i < nbElevators; i++) {
    [elevatorFloor, elevatorPos] = readline().split(' ');
    elevators['f'+elevatorFloor] = elevatorPos;
}

while (true) {
    [cloneFloor, clonePos, direction] = readline().split(' ');	  
    if(cloneFloor == -1) {
        print('WAIT');
    } else {
    	printErr('El F', cloneFloor, elevators[cloneFloor]);
		var P = cloneFloor == exitFloor ? exitPos-clonePos : elevators[cloneFloor]-clonePos;
    	if((P < 0 && direction == 'RIGHT') ||
           (P > 0 && direction == 'LEFT')) {
            print('BLOCK'); 
        } else {
            print('WAIT');
        }
    }
}